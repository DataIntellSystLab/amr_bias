rm(list=ls(all=TRUE))
library(cluster)
library(MatchIt)
library(mboost)
library(parallelDist)
library(ranger)
library(ROCR)

setwd("C:/Users/m.prosperi/Downloads/KDD_DSHEALTH") #set here your folder path

data=read.csv("amr_bias_data.csv",header=T,stringsAsFactors=T)
nam=c("idx","phe","spe","cou","yea","set")
names(data)[1:6]=nam
levels(data$spe)[levels(data$spe)=="Other genus"]="Othergenus"
kmeinds=c(grep("ig_",names(data)),grep("freq_",names(data)))
names(data)[kmeinds]=paste("kmer",1:length(kmeinds),sep="_")
res=rep(0,length(data$phe))
res[which(data$phe=="Resistant")]=1
res[which(data$phe=="Unknown")]=NA
res=as.factor(res)
data=cbind(data,res)

clus=data[which(data$set=="training"),c(1,grep("PCA",names(data)))]
pcacomp=clus[,-1]
clusdist=parDist(scale(as.matrix(pcacomp)))
hc=hclust(clusdist)
wss=function(d) {sum(scale(d,scale=FALSE)^2)}
wssall=function(i,hc,x) {cl=cutree(hc,i);spli=split(x,cl);wss=sum(sapply(spli,wss));wss}
silall=function(i,hc,x) {cl=cutree(hc,i);sv=silhouette(cl,x);mean(sv[,3])}
stp=seq(2,nrow(clus),by=300)
wss_stats=sapply(stp,wssall,h=hc,x=scale(as.matrix(clus[,-c(1:6)])))
sil_stats=sapply(stp,silall,h=hc,x=clusdist)
par(mfcol=c(1,2))
plot(stp,wss_stats,type="b",pch=4)
plot(stp,sil_stats,type="b",pch=4)
bestk=stp[which(sil_stats==max(sil_stats))]
clustersids=cutree(hc,k=bestk)
tojoin=cbind(clus,clustersids)
tojoin=tojoin[,c("idx","clustersids")]
tojoin=tojoin[order(tojoin$clustersids),]
cid=tojoin[1,2]; tokeep=NULL
for (i in 2:length(tojoin$idx)) {if (tojoin$clustersids[i]!=cid) {cid=tojoin$clustersids[i];tokeep=c(tokeep,tojoin$idx[i])}}

datao=data

data=model.matrix(~cou+yea+spe,datao)[,-1]
data=cbind(as.factor(datao[,"idx"]),datao[,"set"],datao[,"res"],data,datao[,grep("kme",names(datao))])
names(data)[1:3]=c("idx","set","res")

train=data[which(data[,"set"]=="training"),]
test1=data[which(data[,"set"]=="test"),]
test2=data[which(data[,"set"]=="unknown"),]

tokeepind=NULL
for (i in 1:length(train$idx)) {if (length(which(train$idx[i]==tokeep))>0) {tokeepind=c(tokeepind,i)}}
trainclus=train[tokeepind,]

ind_res=grep("res",names(data))
ind_spe=grep("spe",names(data))
ind_cou=grep("cou",names(data))
ind_yea=grep("yea",names(data))
ind_kme=grep("kme",names(data))

formb=paste("res~",paste(names(data)[c(ind_spe,ind_cou,ind_yea)],"+",collapse=""),"1"); formb=as.formula(formb)

ms=matchit(formb,data=train,method="cem")
#ms2=matchit(formb,data=train,method="exact")
#ms3=matchit(formb,data=train,method="nearest",distance="glm")
#ms4=matchit(formb,data=train,method="nearest",distance="randomForest")
windows()
plot(summary(ms))
trainpsm=match.data(ms)

crude_c=NULL
adjus_c=NULL
match_c=NULL
clust_c=NULL
crude_p=NULL
adjus_p=NULL
match_p=NULL
clust_p=NULL
for (i in ind_kme)
{
	if (i%%250==0) {cat(i,"\r\n")}
	formcru=paste("res~",names(data)[i],"+1"); formcru=as.formula(formcru)
	formadj=paste("res~",paste(names(data)[c(i,ind_spe,ind_cou,ind_yea)],"+",collapse=""),"1"); formadj=as.formula(formadj)
	mcrude=glm(formcru,family=binomial(),data=train)
	madjus=glm(formadj,family=binomial(),data=train)
	mmatch=glm(formcru,family=binomial(),data=trainpsm)
	mclust=glm(formcru,family=binomial(),data=trainclus)
	crude_c=c(crude_c,summary(mcrude)$coef[2,1])
	adjus_c=c(adjus_c,summary(madjus)$coef[2,1])
	match_c=c(match_c,summary(mmatch)$coef[2,1])
	clust_c=c(clust_c,summary(mclust)$coef[2,1])
	crude_p=c(crude_p,summary(mcrude)$coef[2,4])
	adjus_p=c(adjus_p,summary(madjus)$coef[2,4])
	match_p=c(match_p,summary(mmatch)$coef[2,4])
	clust_p=c(clust_p,summary(mclust)$coef[2,4])
}
ranks=cbind(ind_kme,crude_c,length(ind_kme)*crude_p,adjus_c,length(ind_kme)*adjus_p,match_c,length(ind_kme)*match_p,clust_c,length(ind_kme)*clust_p)
ranks=as.data.frame(ranks)
names(ranks)=c("var","crude_c","crude_p","adjus_c","adjus_p","match_c","match_p","clust_c","clust_p")
ranks$crude_p[which(ranks$crude_p>1)]=1
ranks$adjus_p[which(ranks$adjus_p>1)]=1
ranks$match_p[which(ranks$match_p>1)]=1
ranks$clust_p[which(ranks$clust_p>1)]=1
windows()
par(mfcol=c(1,2))
lims=c(ranks$adjus_c,ranks$crude_c)
plot(ranks$adjus_c,ranks$crude_c,xlab="adjusted",ylab="crude",main="Effect size",pch=4,xlim=c(min(lims),max(lims)),ylim=c(min(lims),max(lims)))
abline(v=0,lty=2)
abline(h=0,lty=2)
lims=log(c(ranks$adjus_p,ranks$crude_p))
plot(log(ranks$adjus_p),log(ranks$crude_p),xlab="adjusted",ylab="crude",main="Log_e p-value",pch=4,xlim=c(min(lims),max(lims)),ylim=c(min(lims),max(lims)))
abline(v=0.05,lty=2)
abline(h=0.05,lty=2)

100*length(which(ranks$crude_p<=0.05 & ranks$adjus_p>0.05))/length(ranks$crude_p)
100*length(which((ranks$crude_c * ranks$adjus_c)<0))/length(ranks$crude_c)

rm(datao)
rm(data)
save.image()

ranks=ranks[order(-abs(crude_c)),]
ind_kme_crude=ranks$var[which(ranks$crude_p<0.05)]
ranks=ranks[order(-abs(adjus_c)),]
ind_kme_adjus=ranks$var[which(ranks$adjus_p<0.05)]
ranks=ranks[order(-abs(match_c)),]
ind_kme_match=ranks$var[which(ranks$match_p<0.05)]
ranks=ranks[order(-abs(clust_c)),]
ind_kme_clust=ranks$var[which(ranks$clust_p<0.05)]

limitf=min(5000,length(ind_kme))
if (length(ind_kme_crude)>limitf) {ind_kme_crude=ind_kme_crude[1:limitf]}
if (length(ind_kme_adjus)>limitf) {ind_kme_adjus=ind_kme_adjus[1:limitf]}
if (length(ind_kme_match)>limitf) {ind_kme_match=ind_kme_match[1:limitf]}
if (length(ind_kme_clust)>limitf) {ind_kme_clust=ind_kme_clust[1:limitf]}

options(expressions=5e5)
form_crude=paste("res~",paste(names(data)[ind_kme_crude],"+",collapse=""),"1"); form_crude=as.formula(form_crude)
form_adjus=paste("res~",paste(names(data)[ind_kme_adjus],"+",collapse=""),"1"); form_adjus=as.formula(form_adjus)
form_match=paste("res~",paste(names(data)[ind_kme_match],"+",collapse=""),"1"); form_match=as.formula(form_match)
form_clust=paste("res~",paste(names(data)[ind_kme_clust],"+",collapse=""),"1"); form_clust=as.formula(form_clust)
form_confo=paste("res~",paste(names(data)[c(ind_kme_crude,ind_spe,ind_cou,ind_yea)],"+",collapse=""),"1"); form_confo=as.formula(form_confo)

windows()
maxiters=100
maxtrees=100
findbest=TRUE
if (findbest)
{
	besttrees=0
	bestiters=0
	bestaic=Inf
	bestpe=Inf
	pes=NULL
	aics=NULL
	xs=NULL
	for (i in seq(50,6000,by=200))
	{
		s=unique(sample(1:length(train[,1]),replace=T))
		tt=train[s,]
		m=glmboost(form_confo,data=tt,family=Binomial(),control=boost_control(mstop=i))
		formc2=as.formula(paste("res~",paste(names(coef(m))[-1],"+",collapse=""),"1"))
		aic=glm(formc2,data=tt,family=binomial())$aic
		m=ranger(form_confo,data=tt,probability=T,num.trees=i)
		pe=m$prediction.error
		if (aic<bestaic) {bestaic=aic;bestiters=i}
		if (pe<bestpe) {bestpe=pe;besttrees=i}
		aics=c(aics,aic);pes=c(pes,pe)
		xs=c(xs,i)
		par(mfcol=c(1,2));plot(xs,aics);lines(lowess(xs,aics));plot(xs,pes);lines(lowess(xs,pes))
	}
	maxiters=lowess(xs,aics)$x[which(lowess(xs,aics)$y==min(lowess(xs,aics)$y))]
	maxtrees=lowess(xs,pes)$x[which(lowess(xs,pes)$y==min(lowess(xs,pes)$y))]
}

boot=10
p_blr_crude=list()
p_rf_crude=list()
p_blr_match=list()
p_rf_match=list()
p_blr_confo=list()
p_rf_confo=list()
p_blr_adjus=list()
p_rf_adjus=list()
p_blr_clust=list()
p_rf_clust=list()
o_cam=list()
o_clust=list()
for (i in 1:boot)
{
	s=sample(1:length(train[,1]),replace=T)
	ttr=train[s,]
	ttt=train[-s,]
	mst=matchit(formb,data=ttr,method="cem")
	ttpsm=match.data(mst)
	m_blr_crude=glmboost(form_crude,data=ttr,family=Binomial(),control=boost_control(mstop=maxiters))
	m_rf_crude=ranger(form_crude,data=ttr,probability=T,num.trees=maxtrees)
	m_blr_match=glmboost(form_match,data=ttpsm,family=Binomial(),weights=ttpsm$weights,control=boost_control(mstop=maxiters))
	m_rf_match=ranger(form_match,data=ttpsm,probability=T,num.trees=maxtrees,case.weights=ttpsm$weights)
	m_blr_confo=glmboost(form_confo,data=ttr,family=Binomial())
	m_rf_confo=ranger(form_confo,data=ttr,probability=T,num.trees=maxtrees)
	m_blr_adjus=glmboost(form_adjus,data=ttr,family=Binomial())
	m_rf_adjus=ranger(form_adjus,data=ttr,probability=T,num.trees=maxtrees)
	p_blr_crude[[i]]=predict(m_blr_crude,newdata=ttt,type="r")
	p_rf_crude[[i]]=predict(m_rf_crude,data=ttt)$p[,2]
	p_blr_match[[i]]=predict(m_blr_match,newdata=ttt,type="r")
	p_rf_match[[i]]=predict(m_rf_match,data=ttt)$p[,2]
	p_blr_confo[[i]]=predict(m_blr_confo,newdata=ttt,type="r")
	p_rf_confo[[i]]=predict(m_rf_confo,data=ttt)$p[,2]
	p_blr_adjus[[i]]=predict(m_blr_adjus,newdata=ttt,type="r")
	p_rf_adjus[[i]]=predict(m_rf_adjus,data=ttt)$p[,2]
	o_cam[[i]]=ttt$res
	s=sample(1:length(trainclus[,1]),replace=T)
	ttr=trainclus[s,]
	ttt=trainclus[-s,]
	m_blr_clust=glmboost(form_clust,data=ttr,family=Binomial())
	m_rf_clust=ranger(form_clust,data=ttr,probability=T,num.trees=maxtrees)
	p_blr_clust[[i]]=predict(m_blr_clust,newdata=ttt,type="r")
	p_rf_clust[[i]]=predict(m_rf_clust,data=ttt)$p[,2]
	o_clust[[i]]=ttt$res
	cat(i,"\n")
}

save.image()

m1=glmboost(form_crude,data=train,family=Binomial(),control=boost_control(mstop=maxiters))
m2=ranger(form_crude,data=train,probability=T,num.trees=maxtrees)
m3=glmboost(form_crude,data=trainpsm,family=Binomial(),weights=weights,control=boost_control(mstop=maxiters))
m4=ranger(form_crude,data=trainpsm,probability=T,num.trees=maxtrees,case.weights=trainpsm$weights)
m5=glmboost(form_confo,data=train,family=Binomial(),control=boost_control(mstop=maxiters))
m6=ranger(form_confo,data=train,probability=T,num.trees=maxtrees)
m7=glmboost(form_adjus,data=train,family=Binomial(),control=boost_control(mstop=maxiters))
m8=ranger(form_adjus,data=train,probability=T,num.trees=maxtrees)
m9=glmboost(form_clust,data=trainclus,family=Binomial(),control=boost_control(mstop=maxiters))
m10=ranger(form_clust,data=trainclus,probability=T,num.trees=maxtrees)

models_nam=c("BLR genes","RF genes","BLR PSM genes","RF PSM genes","BLR genes + confound.","RF genes + confound.","BLR adj. genes","RF adj. genes","BLR clus. genes","RF clus. genes")
predm1=prediction(p_blr_crude,o_cam)
predm2=prediction(p_rf_crude,o_cam)
predm3=prediction(p_blr_match,o_cam)
predm4=prediction(p_rf_match,o_cam)
predm5=prediction(p_blr_confo,o_cam)
predm6=prediction(p_rf_confo,o_cam)
predm7=prediction(p_blr_adjus,o_cam)
predm8=prediction(p_rf_adjus,o_cam)
predm9=prediction(p_blr_clust,o_clust)
predm10=prediction(p_blr_clust,o_clust)
perfm1=performance(predm1,"sens","spec")
perfm2=performance(predm2,"sens","spec")
perfm3=performance(predm3,"sens","spec")
perfm4=performance(predm4,"sens","spec")
perfm5=performance(predm5,"sens","spec")
perfm6=performance(predm6,"sens","spec")
perfm7=performance(predm7,"sens","spec")
perfm8=performance(predm8,"sens","spec")
perfm9=performance(predm9,"sens","spec")
perfm10=performance(predm10,"sens","spec")
aucs=as.numeric(c(mean(as.numeric(performance(predm1,"auc")@y.values)),
mean(as.numeric(performance(predm2,"auc")@y.values)),
mean(as.numeric(performance(predm3,"auc")@y.values)),
mean(as.numeric(performance(predm4,"auc")@y.values)),
mean(as.numeric(performance(predm5,"auc")@y.values)),
mean(as.numeric(performance(predm6,"auc")@y.values)),
mean(as.numeric(performance(predm7,"auc")@y.values)),
mean(as.numeric(performance(predm8,"auc")@y.values)),
mean(as.numeric(performance(predm9,"auc")@y.values)),
mean(as.numeric(performance(predm10,"auc")@y.values))
))
windows()
par(mfcol=c(1,2))
stype="threshold"
sprest="stderror"
plot(perfm1,avg=stype,spread.estimate=sprest,col=2,lwd=2,main="Out-of-bag",lty=2)
plot(perfm2,avg=stype,spread.estimate=sprest,col=2,lwd=2,add=T)
plot(perfm3,avg=stype,spread.estimate=sprest,col=3,lwd=2,add=T,lty=2)
plot(perfm4,avg=stype,spread.estimate=sprest,col=3,lwd=2,add=T)
plot(perfm5,avg=stype,spread.estimate=sprest,col=4,lwd=2,add=T,lty=2)
plot(perfm6,avg=stype,spread.estimate=sprest,col=4,lwd=2,add=T)
plot(perfm7,avg=stype,spread.estimate=sprest,col=5,lwd=2,add=T,lty=2)
plot(perfm8,avg=stype,spread.estimate=sprest,col=5,lwd=2,add=T)
plot(perfm9,avg=stype,spread.estimate=sprest,col=6,lwd=2,add=T,lty=2)
plot(perfm10,avg=stype,spread.estimate=sprest,col=6,lwd=2,add=T)
models_auc=paste(models_nam," (AUC=",round(aucs,2),")",sep="")
legend("bottomleft",models_auc,col=c(2,2,3,3,4,4,5,5,6,6),lwd=2,lty=c(2,1))

predm1=prediction(predict(m1,newdata=test1,type="r"),test1$res)
predm2=prediction(predict(m2,data=test1)$p[,2],test1$res)
predm3=prediction(predict(m3,newdata=test1,type="r"),test1$res)
predm4=prediction(predict(m4,data=test1)$p[,2],test1$res)
predm5=prediction(predict(m5,newdata=test1,type="r"),test1$res)
predm6=prediction(predict(m6,data=test1)$p[,2],test1$res)
predm7=prediction(predict(m7,newdata=test1,type="r"),test1$res)
predm8=prediction(predict(m8,data=test1)$p[,2],test1$res)
predm9=prediction(predict(m9,newdata=test1,type="r"),test1$res)
predm10=prediction(predict(m10,data=test1)$p[,2],test1$res)
perfm1=performance(predm1,"sens","spec")
perfm2=performance(predm2,"sens","spec")
perfm3=performance(predm3,"sens","spec")
perfm4=performance(predm4,"sens","spec")
perfm5=performance(predm5,"sens","spec")
perfm6=performance(predm6,"sens","spec")
perfm7=performance(predm7,"sens","spec")
perfm8=performance(predm8,"sens","spec")
perfm9=performance(predm9,"sens","spec")
perfm10=performance(predm10,"sens","spec")
aucs=as.numeric(c(performance(predm1,"auc")@y.values,
performance(predm2,"auc")@y.values,
performance(predm3,"auc")@y.values,
performance(predm4,"auc")@y.values,
performance(predm5,"auc")@y.values,
performance(predm6,"auc")@y.values,
performance(predm7,"auc")@y.values,
performance(predm8,"auc")@y.values,
performance(predm9,"auc")@y.values,
performance(predm10,"auc")@y.values
))
plot(perfm1,col=2,lwd=2,main="External test set",lty=2)
plot(perfm2,col=2,lwd=2,add=T)
plot(perfm3,col=3,lwd=2,add=T,lty=2)
plot(perfm4,col=3,lwd=2,add=T)
plot(perfm5,col=4,lwd=2,add=T,lty=2)
plot(perfm6,col=4,lwd=2,add=T)
plot(perfm7,col=5,lwd=2,add=T,lty=2)
plot(perfm8,col=5,lwd=2,add=T)
plot(perfm9,col=6,lwd=2,add=T,lty=2)
plot(perfm10,col=6,lwd=2,add=T)
models_auc=paste(models_nam," (AUC=",round(aucs,2),")",sep="")
legend("bottomleft",models_auc,col=c(2,2,3,3,4,4,5,5,6,6),lwd=2,lty=c(2,1))

library(pROC)
proc2=roc(test1$res,predict(m2,data=test1)$p[,2])
proc4=roc(test1$res,predict(m4,data=test1)$p[,2])
proc6=roc(test1$res,predict(m6,data=test1)$p[,2])
proc8=roc(test1$res,predict(m8,data=test1)$p[,2])
proc10=roc(test1$res,predict(m10,data=test1)$p[,2])
roc.test(proc2,proc6)
roc.test(proc2,proc6)
roc.test(proc4,proc6)
roc.test(proc8,proc6)
roc.test(proc10,proc6)
