rm(list=ls(all=TRUE))
library(RWeka)
library(ranger)
library(MatchIt)
library(ROCR)
library(caret)
library(mboost)
library(mclust)
library(parallelDist)
library(cluster)
library(glmnet)
library(Matrix)

setwd("C:/Users/m.prosperi/Downloads/KDD_DSHEALTH")
data=read.csv("attributes.csv",header=F,stringsAsFactors=T)
nam=c("idx","phe","spe","cou","yea","set")
kme=paste("kmer",1:(dim(data)[2]-6),sep="") 
names(data)=c(nam,kme)
res=rep(0,length(data$phe))
res[which(data$phe=="Resistant")]=1
res[which(data$phe=="Unknown")]=NA
res=as.factor(res)
data=cbind(data,res)
datao=data

clus=readRDS("clusters.rds")
for (i in 1:6) {clus[,i]=as.factor(clus[,i])}
clus=clus[which(clus$V6=="training"),]
clusdist=parDist(as.matrix(clus[,-c(1:6)]))
hc=hclust(clusdist)
clustersids=cutree(hc,k=dim(clus)[1]/2)
tojoin=cbind(clus,clustersids)
tojoin=tojoin[,c("V1","clustersids")]
names(tojoin)=c("idx","cluste")
tojoin=tojoin[order(tojoin$cluste),]
cid=tojoin[1,2]; tokeep=NULL
for (i in 2:length(tojoin$idx)) {if (tojoin$cluste[i]!=cid) {cid=tojoin$cluste[i];tokeep=c(tokeep,as.character(tojoin$idx[i]))}}

data=model.matrix(~cou+yea+spe,datao)[,-1]
data=cbind(as.factor(datao[,"idx"]),datao[,"set"],datao[,"res"],data,datao[,grep("kmer",names(datao))])
names(data)[1:3]=c("idx","set","res")

train=data[which(data[,"set"]=="training"),]
test1=data[which(data[,"set"]=="test"),]
test2=data[which(data[,"set"]=="unknown"),]

tokeepind=NULL
for (i in 1:length(train$idx)) {if (length(which(as.character(train$idx[i])==tokeep))>0) {tokeepind=c(tokeepind,i)}}
trainclus=train[tokeepind,]

ind_res=grep("res",names(data))
ind_spe=grep("spe",names(data))
ind_cou=grep("cou",names(data))
ind_yea=grep("yea",names(data))
ind_kme=grep("kmer",names(data))

#trainsparsex=sparse.model.matrix(~.,train[,c(ind_spe,ind_cou,ind_yea,ind_kme)])
#test1sparsex=sparse.model.matrix(~.,test1[,c(ind_spe,ind_cou,ind_yea,ind_kme)])
#test2sparsex=sparse.model.matrix(~.,test2[,c(ind_spe,ind_cou,ind_yea,ind_kme)])

crude_c=NULL
adjus_c=NULL
crude_p=NULL
adjus_p=NULL
for (i in ind_kme)
{
	if (i%%250==0) {cat(i,"\r\n")}
	formcru=paste("res~",names(data)[i],"+1"); formcru=as.formula(formcru)
	formadj=paste("res~",paste(names(data)[c(i,ind_spe,ind_cou,ind_yea)],"+",collapse=""),"1"); formadj=as.formula(formadj)
	mcrude=glm(formcru,family=binomial(),data=train)
	madjus=glm(formadj,family=binomial(),data=train)
	crude_c=c(crude_c,summary(mcrude)$coef[2,1])
	adjus_c=c(adjus_c,summary(madjus)$coef[2,1])
	crude_p=c(crude_p,summary(mcrude)$coef[2,4])
	adjus_p=c(adjus_p,summary(madjus)$coef[2,4])
}
ranks=cbind(ind_kme,crude_c,length(ind_kme)*crude_p,adjus_c,length(ind_kme)*adjus_p,abs(adjus_c))
ranks=as.data.frame(ranks)
names(ranks)=c("var","crude_c","crude_p","adjus_c","adjus_p","ra")
for (i in 1:length(ranks$var)) {if (ranks$crude_p>1) ranks$crude_p=1}
for (i in 1:length(ranks$var)) {if (ranks$adjus_p>1) ranks$adjus_p=1}
par(mfcol=c(1,2))
lims=c(ranks$adjus_c,ranks$crude_c)
plot(ranks$adjus_c,ranks$crude_c,xlab="adjusted",ylab="crude",main="Effect size",pch=4,xlim=c(min(lims),max(lims)),ylim=c(min(lims),max(lims)))
abline(v=0,lty=2)
abline(h=0,lty=2)
lims=log(c(ranks$adjus_p,ranks$crude_p))
plot(log(ranks$adjus_p),log(ranks$crude_p),xlab="adjusted",ylab="crude",main="Log_e p-value",pch=4,xlim=c(min(lims),max(lims)),ylim=c(min(lims),max(lims)))
abline(v=0.05,lty=2)
abline(h=0.05,lty=2)

limitf=length(ind_kme)
ind_kme=ranks[order(-abs(crude_c))[1:limitf],"var"]
ind_kme2=ranks[order(-abs(adjus_c))[1:limitf],"var"]
maxiters=1000
maxtrees=1000
formb=paste("res~",paste(names(data)[c(ind_spe,ind_cou,ind_yea)],"+",collapse=""),"1"); formb=as.formula(formb)
formg=paste("res~",paste(names(data)[ind_kme],"+",collapse=""),"1"); formg=as.formula(formg)
formgc=paste("res~",paste(names(data)[ind_kme2],"+",collapse=""),"1"); formgc=as.formula(formgc)
formc=paste("res~",paste(names(data)[c(ind_kme,ind_spe,ind_cou,ind_yea)],"+",collapse=""),"1"); formc=as.formula(formc)

findbest=FALSE
if (findbest)
{
	besttrees=0
	bestiters=0
	bestaic=Inf
	bestpe=Inf
	pes=NULL
	aics=NULL
	xs=NULL
	for (i in seq(100,4000,by=50))
	{
		s=unique(sample(1:length(train[,1]),replace=T))
		tt=train[s,]
		m=glmboost(formc,data=tt,family=Binomial(),control=boost_control(mstop=i))
		formc2=as.formula(paste("res~",paste(names(coef(m))[-1],"+",collapse=""),"1"))
		aic=glm(formc2,data=tt,family=binomial())$aic
		m=ranger(formc,data=tt,probability=T,num.trees=i)
		pe=m$prediction.error
		if (aic<bestaic) {bestaic=aic;bestiters=i}
		if (pe<bestpe) {bestpe=pe;besttrees=i}
		aics=c(aics,aic);pes=c(pes,pe)
		xs=c(xs,i)
		par(mfcol=c(1,2));plot(xs,aics);lines(lowess(xs,aics));plot(xs,pes);lines(lowess(xs,pes))
	}
	maxiters=bestiters
	maxtrees=besttrees
}

models_nam=c("BLR genes","RF genes","BLR PSM genes","RF PSM genes","BLR genes + confound.","RF genes + confound.","BLR genes adj.","RF genes adj.")

ms=matchit(formb,data=train,method="cem")
#ms2=matchit(formb,data=train,method="exact")
#ms3=matchit(formb,data=train,method="nearest",distance="glm")
#ms4=matchit(formb,data=train,method="nearest",distance="randomForest")
windows()
plot(summary(ms))
trainpsm=match.data(ms)

windows()
tt=train
boot=10
p1=list()
p2=list()
p3=list()
p4=list()
p5=list()
p6=list()
p7=list()
p8=list()
o1=list()
out=which(names(tt)=="class")
for (i in 1:boot)
{
	s=sample(1:length(tt[,1]),replace=T)
	ttr=tt[s,]
	ttt=tt[-s,]
	m1=glmboost(formg,data=ttr,family=Binomial(),control=boost_control(mstop=maxiters))
	m2=ranger(formg,data=ttr,probability=T,num.trees=maxtrees)
	ms=matchit(formb,data=ttr,method="cem")
	ttpsm=match.data(ms)
	m3=glmboost(formg,data=ttpsm,family=Binomial(),weights=weights,control=boost_control(mstop=maxiters))
	m4=ranger(formg,data=ttpsm,probability=T,num.trees=maxtrees,case.weights=ttpsm$weights)
	m5=glmboost(formc,data=ttr,family=Binomial())
	m6=ranger(formc,data=ttr,probability=T,num.trees=maxtrees)
	m7=glmboost(formgc,data=ttr,family=Binomial())
	m8=ranger(formgc,data=ttr,probability=T,num.trees=maxtrees)
	p1[[i]]=predict(m1,newdata=ttt,type="r")
	p2[[i]]=predict(m2,data=ttt)$p[,2]
	p3[[i]]=predict(m3,newdata=ttt,type="r")
	p4[[i]]=predict(m4,data=ttt)$p[,2]
	p5[[i]]=predict(m5,newdata=ttt,type="r")
	p6[[i]]=predict(m6,data=ttt)$p[,2]
	p7[[i]]=predict(m7,newdata=ttt,type="r")
	p8[[i]]=predict(m8,data=ttt)$p[,2]
	o1[[i]]=tt[-s,"res"]
	cat(i,"\n")
}
par(mfcol=c(1,2))
stype="threshold"
sprest="stderror"
predm1=prediction(p1,o1)
predm2=prediction(p2,o1)
predm3=prediction(p3,o1)
predm4=prediction(p4,o1)
predm5=prediction(p5,o1)
predm6=prediction(p6,o1)
predm7=prediction(p7,o1)
predm8=prediction(p8,o1)
perfm1=performance(predm1,"sens","spec")
perfm2=performance(predm2,"sens","spec")
perfm3=performance(predm3,"sens","spec")
perfm4=performance(predm4,"sens","spec")
perfm5=performance(predm5,"sens","spec")
perfm6=performance(predm6,"sens","spec")
perfm7=performance(predm7,"sens","spec")
perfm8=performance(predm8,"sens","spec")
aucs=as.numeric(c(mean(as.numeric(performance(predm1,"auc")@y.values)),
mean(as.numeric(performance(predm2,"auc")@y.values)),
mean(as.numeric(performance(predm3,"auc")@y.values)),
mean(as.numeric(performance(predm4,"auc")@y.values)),
mean(as.numeric(performance(predm5,"auc")@y.values)),
mean(as.numeric(performance(predm6,"auc")@y.values)),
mean(as.numeric(performance(predm7,"auc")@y.values)),
mean(as.numeric(performance(predm8,"auc")@y.values))
))
plot(perfm1,avg=stype,spread.estimate=sprest,col=2,lwd=2,main="Out-of-bag")
plot(perfm2,avg=stype,spread.estimate=sprest,col=3,lwd=2,add=T)
plot(perfm3,avg=stype,spread.estimate=sprest,col=4,lwd=2,add=T)
plot(perfm4,avg=stype,spread.estimate=sprest,col=5,lwd=2,add=T)
plot(perfm5,avg=stype,spread.estimate=sprest,col=6,lwd=2,add=T)
plot(perfm6,avg=stype,spread.estimate=sprest,col=7,lwd=2,add=T)
plot(perfm7,avg=stype,spread.estimate=sprest,col=8,lwd=2,add=T)
plot(perfm8,avg=stype,spread.estimate=sprest,col=9,lwd=2,add=T)
models_auc=paste(models_nam," (AUC=",round(aucs,2),")",sep="")
legend("bottomleft",models_auc,col=2:10,lwd=2)

m1=glmboost(formg,data=train,family=Binomial(),control=boost_control(mstop=maxiters))
m2=ranger(formg,data=train,probability=T,num.trees=maxtrees)

m3=glmboost(formg,data=trainpsm,family=Binomial(),weights=weights,control=boost_control(mstop=maxiters))
m4=ranger(formg,data=trainpsm,probability=T,num.trees=maxtrees,case.weights=trainpsm$weights)

m5=glmboost(formc,data=train,family=Binomial(),control=boost_control(mstop=maxiters))
m6=ranger(formc,data=train,probability=T,num.trees=maxtrees)

m7=glmboost(formgc,data=train,family=Binomial(),control=boost_control(mstop=maxiters))
m8=ranger(formgc,data=train,probability=T,num.trees=maxtrees)

m9=glmboost(formg,data=trainclus,family=Binomial(),control=boost_control(mstop=maxiters))
m10=ranger(formg,data=trainclus,probability=T,num.trees=maxtrees)

models_nam=c("BLR genes","RF genes","BLR PSM genes","RF PSM genes","BLR genes + confound.","RF genes + confound.","BLR genes adj.","RF genes adj.","BLR genes clus.","RF genes clus.")

predm1=prediction(predict(m1,newdata=test1,type="r"),test1$res)
predm2=prediction(predict(m2,data=test1)$p[,2],test1$res)
predm3=prediction(predict(m3,newdata=test1,type="r"),test1$res) #[,2]
predm4=prediction(predict(m4,data=test1)$p[,2],test1$res)
predm5=prediction(predict(m5,newdata=test1,type="r"),test1$res)
predm6=prediction(predict(m6,data=test1)$p[,2],test1$res)
predm7=prediction(predict(m7,newdata=test1,type="r"),test1$res)
predm8=prediction(predict(m8,data=test1)$p[,2],test1$res)
predm9=prediction(predict(m9,newdata=test1,type="r"),test1$res)
predm10=prediction(predict(m10,data=test1)$p[,2],test1$res)
perfm1=performance(predm1,"sens","spec")
perfm2=performance(predm2,"sens","spec")
perfm3=performance(predm3,"sens","spec")
perfm4=performance(predm4,"sens","spec")
perfm5=performance(predm5,"sens","spec")
perfm6=performance(predm6,"sens","spec")
perfm7=performance(predm7,"sens","spec")
perfm8=performance(predm8,"sens","spec")
perfm9=performance(predm9,"sens","spec")
perfm10=performance(predm10,"sens","spec")
aucs=as.numeric(c(performance(predm1,"auc")@y.values,
performance(predm2,"auc")@y.values,
performance(predm3,"auc")@y.values,
performance(predm4,"auc")@y.values,
performance(predm5,"auc")@y.values,
performance(predm6,"auc")@y.values,
performance(predm7,"auc")@y.values,
performance(predm8,"auc")@y.values,
performance(predm9,"auc")@y.values,
performance(predm10,"auc")@y.values
))
plot(perfm1,col=2,lwd=2,main="External test set")
plot(perfm2,col=3,lwd=2,add=T)
plot(perfm3,col=4,lwd=2,add=T)
plot(perfm4,col=5,lwd=2,add=T)
plot(perfm5,col=6,lwd=2,add=T)
plot(perfm6,col=7,lwd=2,add=T)
plot(perfm7,col=8,lwd=2,add=T)
plot(perfm8,col=9,lwd=2,add=T)
plot(perfm9,col=10,lwd=2,add=T)
plot(perfm10,col=11,lwd=2,add=T)
models_auc=paste(models_nam," (AUC=",round(aucs,2),")",sep="")
legend("bottomleft",models_auc,col=2:11,lwd=2)

library(pROC)
proc2=roc(test1$res,predict(m2,data=test1)$p[,2])
proc4=roc(test1$res,predict(m4,data=test1)$p[,2])
proc6=roc(test1$res,predict(m6,data=test1)$p[,2])
roc.test(proc2,proc4)
roc.test(proc2,proc6)
roc.test(proc4,proc6)

pred21=predict(m1,newdata=test2,type="r")
pred22=predict(m2,data=test2)$p[,2]
pred23=predict(m3,newdata=test2,type="r")
pred24=predict(m4,data=test2)$p[,2]
pred25=predict(m5,newdata=test2,type="r")
pred26=predict(m6,data=test2)$p[,2]
predstest2=cbind(pred21,pred22,pred23,pred24,pred25,pred26);predstest2=as.data.frame(predstest2)
names(predstest2)=models_nam

